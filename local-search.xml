<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>开关机动画</title>
    <link href="/2021/05/16/ff2029aa80d64c84873e0256fcc26771/"/>
    <url>/2021/05/16/ff2029aa80d64c84873e0256fcc26771/</url>
    
    <content type="html"><![CDATA[<h1 id="开关机动画"><a href="#开关机动画" class="headerlink" title="开关机动画"></a>开关机动画</h1><p>###启动图位置<br>/kernel<br>###开机动画</p><ul><li>开机动画的地址：system\media\bootanimation.zip 必须输入 system 分区才能改变开机动画</li><li>先在 vim device/rockchip/common/BoardConfig.mk</li></ul><p>保证 BOOT_SHUTDOWN_ANIMATION_RINGING ?= ture<br>device/rockchip/common/bootshutdown/bootshutdown.mk</p><ul><li>制作开机动画 bootanimation.zip 文件并拷贝到 device/rockchip/common/bootshutdown 目录下面。</li><li>制作关机动画 shutdownanimation.zip 文件并拷贝到 device/rockchip/common/bootshutdown 目录下面。</li><li>bootanimation.zip 包含的内容由存放图片的文件夹与 desc.txt（动画展示效果的描述性文件）</li></ul><h4 id="bootanimation-zip-说明"><a href="#bootanimation-zip-说明" class="headerlink" title="bootanimation.zip 说明"></a>bootanimation.zip 说明</h4><p>bootanimation.zip<br>├── part2<br>│ ├── bg003.png<br>│ ├── bg002.png<br>│ └── bg001.png<br>└── desc.txt</p><p>3、上述范例中 part2 为存放图片的文件夹（共包含 bg001.png、bg002.png、bg003.png），每张图片即为动画的一帧</p><p>4、desc.txt（动画展示效果描述性文件），范例中 desc.txt 具体内容如下：</p><ul><li>|1280 | 720 | 1</li></ul><p>-|-|-|-<br>p | 1 | 7 | part2<br>p | 0 | 0 | part2</p><ul><li>第一行有 3 列，每列对应一个数字。其中 1280 与 720 对应图片显示尺寸宽与高的分辨率，1 表示帧率（即帧/秒）</li><li>第二行有 4 列，第三行有 5 列，末尾以换行符结束（注意此换行符不能省略，此换行符是动画描述结束标志符，</li></ul><p><strong>底层程序解析到此换行符停止解析并开始展示动画效果，若省略是会出现部分阶段动画无法播放而显示黑屏）。</strong></p><p>其中 p 为表示动画播放阶段标志位，每个阶段对应一个文件夹（范例中包含两个播放阶段，都对应 part2 文件夹）。</p><p>第二列表示每一播放阶段循环播放的次数（若为 0 表示无线循环播放），第三列表示阶段间隔时间（即阻塞动画播放进程的时间，如范例中阻塞（7 / 帧率）秒后再播放第二阶段的动画）。</p>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>开机动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用adb调试gpio</title>
    <link href="/2021/05/16/785cee0850e6426f9b7aae69b2825721/"/>
    <url>/2021/05/16/785cee0850e6426f9b7aae69b2825721/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-adb-调试-gpio"><a href="#使用-adb-调试-gpio" class="headerlink" title="使用 adb 调试 gpio"></a>使用 adb 调试 gpio</h1><p>echo 1006 &gt; /sys/class/gpio/unexport</p><p>echo 1006 &gt; /sys/class/gpio/export</p><p>echo out&gt; /sys/class/gpio/gpio1006/direction</p><p>echo 1 &gt;/sys/class/gpio/gpio1006/value</p><p>echo 0 &gt;/sys/class/gpio/gpio1006/value</p><p>cat /sys/class/gpio/gpio1006/direction</p><p>cat /sys/class/gpio/gpio1006/direction</p><p>cat /sys/class/gpio/gpio1006/value</p><p>通过 sysfs 方式控制 GPIO，先访问/sys/class/gpio 目录，向 export 文件写入 GPIO 编号，使得该 GPIO 的操作接口从内核空间暴露到用户空间，GPIO 的操作接口包括 direction 和 value 等，direction 控制 GPIO 方向，而 value 可控制 GPIO 输出或获得 GPIO 输入。文件 IO 方式操作 GPIO，使用到了 4 个函数 open、close、read、write。</p><p>首先，看看系统中有没有“/sys/class/gpio”这个文件夹。如果没有请在编译内核的时候加入 Device Drivers-&gt; GPIO Support -&gt;/sys/class/gpio/… (sysfs interface)。</p><p>/sys/class/gpio 的使用说明：</p><p>gpio_operation 通过/sys/文件接口操作 IO 端口 GPIO 到文件系统的映射<br>控制 GPIO 的目录位于/sys/class/gpio<br>/sys/class/gpio/export 文件用于通知系统需要导出控制的 GPIO 引脚编号<br>/sys/class/gpio/unexport 用于通知系统取消导出<br>/sys/class/gpio/gpiochipX 目录保存系统中 GPIO 寄存器的信息，包括每个寄存器控制引脚的起始编号 base，寄存器名称，引脚总数 导出一个引脚的操作步骤<br>首先计算此引脚编号，引脚编号 = 控制引脚的寄存器基数 + 控制引脚寄存器位数<br>向/sys/class/gpio/export 写入此编号，比如 12 号引脚，在 shell 中可以通过以下命令实现，命令成功后生成/sys/class/gpio/gpio12 目录，如果没有出现相应的目录，说明此引脚不可导出<br>direction 文件，定义输入输入方向，可以通过下面命令定义为输出。direction 接受的参数：in, out, high, low。high/low 同时设置方向为输出，并将 value 设置为相应的 1/0<br>value 文件是端口的数值，为 1 或 0</p><p>几个例子：</p><ol><li> 导出</li></ol><p>/sys/class/gpio# echo 44 &gt; export</p><ol start="2"><li> 设置方向</li></ol><p>/sys/class/gpio/gpio44# echo out &gt; direction</p><ol start="3"><li> 查看方向</li></ol><p>/sys/class/gpio/gpio44# cat direction</p><ol start="4"><li> 设置输出</li></ol><p>/sys/class/gpio/gpio44# echo 1 &gt; value</p><ol start="5"><li> 查看输出值</li></ol><p>/sys/class/gpio/gpio44# cat value</p><ol start="6"><li> 取消导出</li></ol><p>/sys/class/gpio# echo 44 &gt; unexport</p>]]></content>
    
    
    
    <tags>
      
      <tag>gpio</tag>
      
      <tag>adb</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>了解和认识GPIO和dts</title>
    <link href="/2021/05/16/43f372a6392b4aea9dc0a16015efb294/"/>
    <url>/2021/05/16/43f372a6392b4aea9dc0a16015efb294/</url>
    
    <content type="html"><![CDATA[<h1 id="了解和认识-GPIO-和-dts"><a href="#了解和认识-GPIO-和-dts" class="headerlink" title="了解和认识 GPIO 和 dts"></a>了解和认识 GPIO 和 dts</h1><h2 id="了解-GPIO"><a href="#了解-GPIO" class="headerlink" title="了解 GPIO"></a>了解 GPIO</h2><h3 id="GPIO-是什么"><a href="#GPIO-是什么" class="headerlink" title="GPIO 是什么"></a>GPIO 是什么</h3><p>GPIO, 全称 General-Purpose Input/Output（通用输入输出），是一种软件运行期间能够动态配置和控制的通用引脚</p><h2 id="了解-DTS"><a href="#了解-DTS" class="headerlink" title="了解 DTS"></a>了解 DTS</h2><p>DTS 关联关系<br>linux 设备驱动模型三要素：device，driver，bus。Device 和 driver 分别注册到 bus 上，然后通过 name 匹配，最终走到 driver 的 probe 函数中。<br>传统的 ARM Linux 定义 platform_device 和注册过程都是通过静态写在 arch/mach 下面的文件中，为每一个外设都初始化好一个 platform_device，然后在 kernel 初始化的时候把这些 device 注册到 platform_bus_type 中，然后在后续的 driver 初始化中再把相应的 platform_driver 结构体注册到 platform_bus_type 中，然后通过 name 匹配。<br>现在有了 device tree，platform_device 不需要静态定义在 c 文件中了，而是利用 device tree 的方法实现了动态生成 platform_device。这样同一个内核就可以在不需要修改内核代码的情况下根据不同的 DTS 文件，动态生成针对不同硬件平台的 platform_device。</p><h3 id="什么是-DTS？为什么要引入-DTS？"><a href="#什么是-DTS？为什么要引入-DTS？" class="headerlink" title="什么是 DTS？为什么要引入 DTS？"></a>什么是 DTS？为什么要引入 DTS？</h3><p>DTS 即 Device Tree Source 设备树源码, Device Tree 是一种描述硬件的数据结构，它起源于 OpenFirmware (OF)。<br>ARM 平台的相关 code 做出如下相关规范调整，这个也正是引入 DTS 的原因。</p><ul><li><p>1、ARM 的核心代码仍然保存在 arch/arm 目录下在 dts (Device Tree) 文件</p></li><li><p>2、ARM SoC core architecture code 保存在 arch/arm 目录下</p></li><li><p>3、ARM SOC 的周边外设模块的驱动保存在 drivers 目录下</p></li><li><p>4、ARM SOC 的特定代码在 arch/arm/mach-xxx 目录下</p></li><li><p><strong>5、ARM SOC board specific 的代码被移除，由 DeviceTree 机制来负责传递硬件拓扑和硬件资源信息。</strong></p><p><strong>本质上，Device Tree 改变了原来用 hardcode 方式将 HW（hardware）配置信息嵌入到内核代码的方法，改用 bootloader 传递一个 DB 的形式。<br>如果我们认为 kernel 是一个 black box，那么其输入参数应该包括：<br>a.识别 platform 的信息 b.runtime 的配置参数 c.设备的拓扑结构以及特性<br>对于嵌入式系统，在系统启动阶段，bootloader 会加载内核并将控制权转交给内核，此外，还需要把上述的三个参数信息传递给 kernel，以便 kernel 可以有较大的灵活性。在 linux kernel 中，Device Tree 的设计目标就是如此。</strong></p><p>runtime 使程序能够与运行的环境相连接</p></li></ul><h3 id="DTS-文件格式"><a href="#DTS-文件格式" class="headerlink" title="DTS 文件格式"></a>DTS 文件格式</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs basic">/ &#123; <span class="hljs-string">&quot;/&quot;</span> 表示root结点，该结点下有两个子结点node1和node2<br><br>    node1 &#123;<br>      //结点<span class="hljs-string">&quot;node1&quot;</span>下又含有子结点，对于嵌入式系统，<br>      //在系统启动阶段，bootloader会加载内核并将控制权转交给内核，<br>      //此外，还需要把上述的三个参数信息传递给kernel，以便kernel可以有较大的灵活性。<br><br>        a-string-<span class="hljs-keyword">list</span>-property = <span class="hljs-string">&quot;firststring&quot;</span>, <span class="hljs-string">&quot;second string&quot;</span>;字符串数组<br><br>        a-byte-<span class="hljs-keyword">data</span>-property = [<span class="hljs-number">0</span>x01 <span class="hljs-number">0</span>x23 <span class="hljs-number">0</span>x340x56];二进制数组<br><br>        child-node1 &#123;<br><br>            first-child-property;<br><br>            second-child-property = &lt;<span class="hljs-number">1</span>&gt;;Cells（由u32整数组成）<br><br>            a-string-property = <span class="hljs-string">&quot;Hello,world&quot;</span>;<br><br>        &#125;;<br><br>        child-node2 &#123;<br><br>        &#125;;<br><br>    &#125;;<br><br>    node2 &#123;<br><br>        an-empty-property;属性为空<br><br>        a-cell-property = &lt;<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>&gt;; /* each number (cell) is a uint32 */<br><br>        child-node1 &#123;<br><br>        &#125;;<br><br>    &#125;;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><h5 id="1-compatible"><a href="#1-compatible" class="headerlink" title="1.compatible"></a>1.compatible</h5><p>上述.dts 文件中,root 结点”/“的 compatible 属性 compatible = “acme,coyotes-revenge”;定义了系统的名称,它的组织形式为:<manufacturer>,<model>。Linux 内核透过 root 结点”/“的 compatible 属性即可判断它启动的是什么 machine。在.dts 文件的每个设备,都有一个 compatible 属性,<strong>compatible 属性用户驱动和设备的绑定。</strong></p><h5 id="2-结点命名"><a href="#2-结点命名" class="headerlink" title="2.结点命名"></a>2.结点命名</h5><p>它们遵循的组织形式为:<name>[@<unit-address>],&lt;&gt;中的内容是必选项,[]中的则为可选项。name 是一个 ASCII 字符串,用于描述结点对应的设备类型,如 3com Ethernet 适配器对应的结点 name 宜为 ethernet,而不是 3com。如果一个结点描述的设备有地址,则应该给出@unit-address。多个相同类型设备结点的 name 可以一样,只要 unit-address 不同即可,如本例中含有 cpu@0、cpu@1 以及 serial@101f0000 与 serial@101f2000 这样的同名结点。设备的 unit-address 地址也经常在其对应结点的 reg 属性中给出。</p><h5 id="3-地址信息"><a href="#3-地址信息" class="headerlink" title="3.地址信息"></a>3.地址信息</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">reg<br><span class="hljs-meta">#address-cells</span><br><span class="hljs-meta">#size-cells</span><br></code></pre></td></tr></table></figure><p>其中 reg 的组织形式为 reg = &lt;address1 length1 [address2 length2] [address3 length3] … &gt;,其中的每一组 address length 表明了设备使用的一个地址范围。父结点的#address-cells 和#size-cells 分别决定了子结点的 reg 属性的 address 和 length 字段的长度。</p><h5 id="4-ranges-属性"><a href="#4-ranges-属性" class="headerlink" title="4.ranges 属性"></a>4.ranges 属性</h5><p>root 结点的子结点描述的是 CPU 的视图,因此 root 子结点的 address 区域就直接位于 CPU 的 memory 区域。但是,经过总线桥后的 address 往往需要经过转换才能对应的 CPU 的 memory 映射。external-bus 的 ranges 属性定义了经过 external-bus 桥后的地址范围如何映射到 CPU 的 memory 区域。</p><h5 id="5-中断相关"><a href="#5-中断相关" class="headerlink" title="5.中断相关"></a>5.中断相关</h5><p>interrupt-controller – 这个属性为空,中断控制器应该加上此属性表明自己的身份;#interrupt-cells – 与#address-cells 和 #size-cells 相似,它表明连接此中断控制器的设备的 interrupts 属性的 cell 大小。在整个 Device Tree 中,与中断相关的属性还包括 interrupt-parent – 设备结点透过它来指定它所依附的中断控制器的 phandle,当结点没有指定 interrupt-parent 时,则从父级结点继承。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">pci@0x10180000 &#123;<br>        compatible = <span class="hljs-string">&quot;arm,versatile-pci-hostbridge&quot;</span>, <span class="hljs-string">&quot;pci&quot;</span>;<br>        reg = &lt;0x10180000 0x1000&gt;;<br>        interrupts = &lt;8 0&gt;;<br>        bus-ranges = &lt;0 0&gt;;<br><br>        <span class="hljs-comment">#address-cells = &lt;3&gt;</span><br>        <span class="hljs-comment">#size-cells = &lt;2&gt;;</span><br>        ranges = &lt;0x42000000 0 0x80000000 0x80000000 0 0x20000000<br>                 0x02000000 0 0xa0000000 0xa0000000 0 0x10000000<br>                 0x01000000 0 0x00000000 0xb0000000 0 0x01000000&gt;;<br> &#125;;<br></code></pre></td></tr></table></figure><h4 id="修改-Makefile-Kconfig-和-config"><a href="#修改-Makefile-Kconfig-和-config" class="headerlink" title="修改 Makefile Kconfig 和 .config"></a>修改 Makefile Kconfig 和 .config</h4><h5 id="Makefile-Kconfig-和-config-三者作用"><a href="#Makefile-Kconfig-和-config-三者作用" class="headerlink" title="Makefile Kconfig 和 .config 三者作用"></a>Makefile Kconfig 和 .config 三者作用</h5><p>简单来说就是去饭店点菜：Kconfig 是菜单，Makefile 是做法，.config 就是你点的菜。<br>Makefile：一个文本形式的文件，编译源文件的方法。<br>Kconfig：一个文本形式的文件，内核的配置菜单。<br>.config：编译内核所依据的配置。</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.cnblogs.com/hbtmwangjin/articles/9012804.html">浅谈内核的 Makefile、Kconfig 和.config 文件</a></p><h5 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h5><ul><li><p>1.增加驱动文件和对应的 Makefile Kconfig</p></li><li><p>2.修改上一级的 Makefile Kconfig</p></li><li><p>3.使用 Make menuconfig 进行配置</p></li><li><p>4.编译烧录和运行</p></li><li><p><strong>5.操作 GPIO 需要对 DTS 进行操作</strong></p></li><li><p>首先需要在 dts (Device Tree) 文件 firefly-rk3288.dts 中增加驱动的资源描述：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">firefly-led&#123;<br>    compatible = <span class="hljs-string">&quot;firefly,led&quot;</span>;<br>    led-work = &lt;&amp;gpio8 GPIO_A2 GPIO_ACTIVE_LOW&gt;;<br>    led-power = &lt;&amp;gpio8 GPIO_A1 GPIO_ACTIVE_LOW&gt;;<br>    status = <span class="hljs-string">&quot;okay&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>这里定义了两颗 LED 灯的 GPIO 设置,之后在驱动程序中加入对 GPIO 口的申请和控制则可：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#ifdef  CONFIG_OF</span><br><span class="hljs-comment">#include &lt;linux/of.h&gt;</span><br><span class="hljs-comment">#include &lt;linux/of_gpio.h&gt;</span><br><span class="hljs-comment">#endif</span><br><br>static int firefly_led_probe(struct platform_device *pdev)&#123;<br>  int ret = -1;int gpio, flag;<br>  struct device_node *led_node = pdev-&gt;dev.of_node;<br>  gpio = of_get_named_gpio_flags(led_node, <span class="hljs-string">&quot;led-power&quot;</span>, 0, &amp;flag);<br>  <span class="hljs-keyword">if</span> (!gpio_is_valid(gpio))&#123;<br>      printk(<span class="hljs-string">&quot;invalid led-power: %d\n&quot;</span>,gpio);<br>      <span class="hljs-built_in">return</span> -1;<br>  &#125;<br>      printk(<span class="hljs-string">&quot;gpio %d request failed!\n&quot;</span>,gpio);<br>      <span class="hljs-built_in">return</span> ret;<br>  &#125;<br>  led_info.power_gpio = gpio;<br>  led_info.power_enable_value = (flag == OF_GPIO_ACTIVE_LOW) ? 0 : 1;<br>  gpio_direction_output(led_info.power_gpio, !(led_info.power_enable_value));<br>  ...<br>  on_error:gpio_free(gpio);<br>&#125;<br></code></pre></td></tr></table></figure><p>中断进程的名字可以用 cat /proc/interrupt 显示出来<br><img src="../../pic/gpio/Screenshot%20from%202020-08-31%2017-25-12.png"></p><h1 id="GPIO-驱动配置"><a href="#GPIO-驱动配置" class="headerlink" title="GPIO 驱动配置"></a>GPIO 驱动配置</h1><h2 id="添加驱动文件夹"><a href="#添加驱动文件夹" class="headerlink" title="添加驱动文件夹"></a>添加驱动文件夹</h2><p>在 kernel/drivers 文件夹下新建文件夹</p><p>kernel/drivers/hu</p><p>内含三个文件 bee.c Kconfig Makefile</p><h2 id="配置-dts-文件"><a href="#配置-dts-文件" class="headerlink" title="配置 dts 文件"></a>配置 dts 文件</h2><p>进入 kernel/arch/arm/boot/dts 文件夹 编辑驱动节点<br>编辑 rk3288-tb.dts,添加一下内容来注册驱动<br><img src="../../pic/gpio/dts.png"></p><h2 id="添加驱动文件"><a href="#添加驱动文件" class="headerlink" title="添加驱动文件"></a>添加驱动文件</h2><p>在 kernel/drivers 文件夹下新建文件夹，文件名任意，在文件夹下新建 3 个文件<div>*.c Makefile Kconfig<div><br>Makefile 内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#Bee core</span><br>obj-$(CONFIG_BEE)               += bee.o<br></code></pre></td></tr></table></figure><p>Kconfig 内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">config BEE<br>        tristate <span class="hljs-string">&quot;bee driver&quot;</span><br>        <span class="hljs-built_in">help</span><br>          driver <span class="hljs-keyword">for</span> bee<br></code></pre></td></tr></table></figure><p>修改上级菜单，也就是 kernel/drivers 文件夹下的 Makefile Kconfig，否则新的驱动不会起效。<br>在 Makefile 文件最后添加</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">oby-y         +</span>=<span class="hljs-string"> hu/</span><br></code></pre></td></tr></table></figure><p>在 Kconfig 文件最后添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> <span class="hljs-string">&quot;drivers/hu/Kconfig&quot;</span><br></code></pre></td></tr></table></figure><p>*编译驱动还需要修改 kernel/.config,在编译时选择即可。*也可以运行 make menuconfig，但不建议这么做</p><h1 id="编写-GPIO-驱动"><a href="#编写-GPIO-驱动" class="headerlink" title="编写 GPIO 驱动"></a>编写 GPIO 驱动</h1><p><strong>Linux dmesg 命令用于显示开机信息。</strong><br>kernel 会将开机信息存储在 ring buffe(循环缓冲区)中。您若是开机时来不及查看信息，可利用 dmesg 来查看。开机信息亦保存在/var/log 目录中，名称为 dmesg 的文件里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/delay.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/gpio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/interrupt.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_OF</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/of.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/of_gpio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/of_platform.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GPIO_LOW 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> GPIO_HIGH 1</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">此处是探针程序的运行</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">irqreturn_t</span> <span class="hljs-title">key_irq_handle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> irq, <span class="hljs-keyword">void</span> *dev_id, struct pt_regs *regs)</span></span><br><span class="hljs-function"></span>&#123;<br>  ...<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">samtu_ledtest_probe</span><span class="hljs-params">(struct platform_device *pdev)</span></span>&#123;<br>    ...<br>    ret = request_irq(irq, key_irq_handle, IRQF_TRIGGER_FALLING, <span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;keyflag&quot;</span>); <span class="hljs-comment">// 注册中断</span><br>  ...<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">samtu_ledtest_remove</span><span class="hljs-params">(struct platform_device *pdev)</span></span>&#123;<br>  ...<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_OF</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">of_device_id</span> <span class="hljs-title">of_samtu_ledtest_match</span>[] =</span> &#123;<br>    &#123;.compatible = <span class="hljs-string">&quot;samtu,bee&quot;</span>&#125;,<br>    &#123;<span class="hljs-comment">/*    */</span>&#125;&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_driver</span> <span class="hljs-title">samtu_ledtest_driver</span> =</span><br>&#123;<br>        .probe = samtu_ledtest_probe,<span class="hljs-comment">//他首先执行的是.probe</span><br>        .remove = samtu_ledtest_remove,<span class="hljs-comment">//主要的结构体，.probe 探针.remove 移除.driver 驱动</span><br>        .driver = &#123;<br>            .name = <span class="hljs-string">&quot;samtu_bee&quot;</span>,<span class="hljs-comment">//.name</span><br>            .owner = THIS_MODULE,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_OF</span><br>            .of_match_table = of_samtu_ledtest_match,<span class="hljs-comment">//.of_match_table  这个是match DTS相关的地方</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>        &#125;,<br><br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">下面的程序是驱动注册,注册平台驱的结构体</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __init <span class="hljs-title">ledtest_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> <span class="hljs-comment">//init led test //程序运行此处2</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">return</span> platform_driver_register(&amp;samtu_ledtest_driver);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">下面的程序是退出驱动注册</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __exit <span class="hljs-title">ledtest_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> <span class="hljs-comment">//exit the led test</span></span><br><span class="hljs-function"></span>&#123;<br>        platform_driver_unregister(&amp;samtu_ledtest_driver);<br>        printk(<span class="hljs-string">&quot;-----Exit ledtest\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">下面的程序是驱动调用，整个驱动首先调用此处</span><br><span class="hljs-comment">*/</span><br>module_init(ledtest_init); <span class="hljs-comment">//程序首先调用此处1</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">下面的程序是驱动调用，整个驱动结束时调用此处</span><br><span class="hljs-comment">*/</span><br>module_exit(ledtest_exit);<br></code></pre></td></tr></table></figure><p>我们分开看这几个函数，按启动顺序开始</p><h2 id="启动结构体"><a href="#启动结构体" class="headerlink" title="启动结构体"></a>启动结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_OF</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">of_device_id</span> <span class="hljs-title">of_samtu_ledtest_match</span>[] =</span> &#123;<br>    &#123;.compatible = <span class="hljs-string">&quot;samtu,bee&quot;</span>&#125;,<br>    &#123;<span class="hljs-comment">/*    */</span>&#125;&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_driver</span> <span class="hljs-title">samtu_ledtest_driver</span> =</span><br>    &#123;<br>        .probe = samtu_ledtest_probe,<br>        .remove = samtu_ledtest_remove,<br>        .driver = &#123;<br>            .name = <span class="hljs-string">&quot;samtu_bee&quot;</span>,<br>            .owner = THIS_MODULE,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> CONFIG_OF</span><br>            .of_match_table = of_samtu_ledtest_match,<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>        &#125;,<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __init <span class="hljs-title">ledtest_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> <span class="hljs-comment">//init led test //程序运行此处2</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">return</span> platform_driver_register(&amp;samtu_ledtest_driver);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __exit <span class="hljs-title">ledtest_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> <span class="hljs-comment">//exit the led test</span></span><br><span class="hljs-function"></span>&#123;<br>        platform_driver_unregister(&amp;samtu_ledtest_driver);<br>&#125;<br>module_init(ledtest_init); <span class="hljs-comment">//程序首先调用此处1</span><br>module_exit(ledtest_exit);<br></code></pre></td></tr></table></figure><h2 id="探针函数"><a href="#探针函数" class="headerlink" title="探针函数"></a>探针函数</h2><p><strong>结构体中最早执行的函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">samtu_ledtest_probe</span><span class="hljs-params">(struct platform_device *pdev)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> gpio, flag, irq;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_node</span> *<span class="hljs-title">bee_node</span> =</span> pdev-&gt;dev.of_node;<br>        gpio = of_get_named_gpio_flags(bee_node, <span class="hljs-string">&quot;keygpio&quot;</span>, <span class="hljs-number">0</span>, &amp;flag);<br>        <span class="hljs-keyword">if</span> (!gpio_is_valid(gpio))<br>        &#123;<br>                printk(<span class="hljs-string">&quot;this is valid invalid gpio\n&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        gpio_free(gpio);<br>        ret = gpio_request(gpio, <span class="hljs-string">&quot;keygpio&quot;</span>);<br>        <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>)<br>        &#123;<br>                printk(<span class="hljs-string">&quot;this is invalid request gpio\n&quot;</span>);<br>                <span class="hljs-keyword">return</span> -EIO;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>                irq = gpio_to_irq(gpio);                                                        <span class="hljs-comment">//中断号映射</span><br>                ret = request_irq(irq, key_irq_handle, IRQF_TRIGGER_FALLING, <span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;keyflag&quot;</span>); <span class="hljs-comment">// 注册中断</span><br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br>                &#123;<br>                        printk(<span class="hljs-string">&quot;---irq--failed\n&quot;</span>);<br>                        free_irq(irq, <span class="hljs-string">&quot;keyflag&quot;</span>);<br>                        gpio_free(gpio);<br>                        <span class="hljs-keyword">return</span> ret;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//return ok</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="移除函数"><a href="#移除函数" class="headerlink" title="移除函数"></a>移除函数</h2><p><strong>但驱动注册完成时执行的函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">samtu_ledtest_remove</span><span class="hljs-params">(struct platform_device *pdev)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="中断函数"><a href="#中断函数" class="headerlink" title="中断函数"></a>中断函数</h2><p><strong>中断发生时执行的函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">irqreturn_t</span> <span class="hljs-title">key_irq_handle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> irq, <span class="hljs-keyword">void</span> *dev_id, struct pt_regs *regs)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> gpio, flag, i;<br>        gpio = <span class="hljs-number">1006</span>;<br>        <span class="hljs-keyword">if</span> (!gpio_is_valid(gpio))<br>        &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        gpio_free(gpio);<br>        <span class="hljs-keyword">if</span> (gpio_request(gpio, <span class="hljs-string">&quot;beegpio&quot;</span>))<br>        &#123;<br>                <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<br>                gpio_set_value(gpio, GPIO_LOW);<br>                mdelay(<span class="hljs-number">100</span>);<br>                gpio_set_value(gpio, GPIO_HIGH);<br>                mdelay(<span class="hljs-number">100</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> IRQ_HANDLED;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>gpio</tag>
      
      <tag>dts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>屏幕旋转</title>
    <link href="/2021/05/16/db6466d8e2d84253b8d47963f15dfd50/"/>
    <url>/2021/05/16/db6466d8e2d84253b8d47963f15dfd50/</url>
    
    <content type="html"><![CDATA[<h2 id="旋转屏幕"><a href="#旋转屏幕" class="headerlink" title="旋转屏幕"></a>旋转屏幕</h2><p>在 framework/base/services/core/java/com/android/server/wm/WindowManagerService.java 中</p><p>getOrientationLocked()函数中确定横屏和竖屏</p><p>强制应用横竖屏 就是调用了 AMS 的 setRequestedOrientation 接口，这个接口先是调用 WMS 的 setAppOrientation 函数设置这个 Activity 在 WMS 中的方向。然后在调用 WMS 的 updateOrientationFromAppTokens 函数旋转屏幕，最后在调用 updateConfigurationLocked 这个函数之前博客分析过就是是否让 Activity 重新 Launch 等。</p><p>如果不考虑开机动画的方向的话，修改屏幕其实并不困难<br>在 settings 变量里修改<br>settings.system.user_rotation 参数</p><p>流程<br>//System<br>Settings.System.putInt(getActivity().getContentResolver(), “sound_effects_enabled”, 1);</p><p>Settings.System.getInt(getActivity().getContentResolver(), “sound_effects_enabled”, 1);</p><p>//Global<br>Settings.Global.getString(ActivityThread.currentApplication().getContentResolver(), “disable_list”);</p><h1 id="Android-7-1-屏幕旋转流程分析"><a href="#Android-7-1-屏幕旋转流程分析" class="headerlink" title="Android 7.1 屏幕旋转流程分析"></a>Android 7.1 屏幕旋转流程分析</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Android 屏幕的旋转在 framework 主要涉及到三个类，结构如图</p><p><img src="https://images2017.cnblogs.com/blog/195250/201712/195250-20171220174957193-2064276569.png" alt="img"></p><p>**PhoneWindowManager：**为屏幕的横竖屏转换的管理类。</p><p><strong>WindowOrientationListener：</strong> 是一个传感器的 listener 的基类，PhoneWindowManager 的 MyOrientationListener 继承自该基类。</p><p>**WindowManagerService：**是具体实施屏幕旋转的工作。</p><h2 id="代码路径："><a href="#代码路径：" class="headerlink" title="代码路径："></a>代码路径：</h2><p><strong>PhoneWindowManager：</strong></p><p>路径：/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</p><p><strong>WindowOrientationListener：</strong></p><p>路径：</p><p>/frameworks/base/services/core/java/com/android/server/policy/WindowOrientationListener.java</p><p><strong>WindowManagerService：</strong></p><p>路径：</p><p>/fram eworks/base/services/core/java/com/android/server/wm/WindowManagerService.java</p><h2 id="总的流程大致如下："><a href="#总的流程大致如下：" class="headerlink" title="总的流程大致如下："></a>总的流程大致如下：</h2><p>PhoneWindowManager 实现一个 MyOrientationListener 用来注册和监听传感器（屏幕）变化，根据用户设置情况（是否允许屏幕旋转）来启动和关闭监听。当屏幕方向变化时 PhoneWindowManager 通过调用 WindowManagerService 具体来完成屏幕的旋转。</p><p><img src="https://images2017.cnblogs.com/blog/195250/201712/195250-20171220175524725-411179865.png" alt="img"></p><h1 id="二、流程分析"><a href="#二、流程分析" class="headerlink" title="二、流程分析"></a>二、流程分析</h1><h2 id="1）PhoneWindownManager-开启监听"><a href="#1）PhoneWindownManager-开启监听" class="headerlink" title="1）PhoneWindownManager 开启监听"></a>1）PhoneWindownManager 开启监听</h2><p><strong>A: 监听用户设置的变化</strong></p><p>PhoneWindownManager 通过注册一个 ContentObserver 来监听用户设置的变化，当用户设置变化后调用 updateSettings（）函数，做设置变化的更新和做相应的动作。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">SettingsObserver</span> extends <span class="hljs-type">ContentObserver</span> &#123;</span><br><span class="hljs-class">      <span class="hljs-type">SettingsObserver</span>(<span class="hljs-type">Handler</span> <span class="hljs-title">handler</span>) &#123;</span><br><span class="hljs-class">          super(<span class="hljs-title">handler</span>);</span><br><span class="hljs-class">      &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">      void observe() &#123;</span><br><span class="hljs-class">          // <span class="hljs-type">Observe</span> all users&#x27; changes</span><br><span class="hljs-class">          <span class="hljs-type">ContentResolver</span> resolver = mContext.getContentResolver();</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-type">END_BUTTON_BEHAVIOR</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-type">INCALL_POWER_BUTTON_BEHAVIOR</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-type">INCALL_BACK_BUTTON_BEHAVIOR</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-type">WAKE_GESTURE_ENABLED</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-type">ACCELEROMETER_ROTATION</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-type">USER_ROTATION</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-type">SCREEN_OFF_TIMEOUT</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">System</span>.<span class="hljs-type">POINTER_LOCATION</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-type">DEFAULT_INPUT_METHOD</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">Secure</span>.<span class="hljs-type">IMMERSIVE_MODE_CONFIRMATIONS</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          resolver.registerContentObserver(<span class="hljs-type">Settings</span>.<span class="hljs-type">Global</span>.<span class="hljs-title">getUriFor</span>(</span><br><span class="hljs-class">                  <span class="hljs-type">Settings</span>.<span class="hljs-type">Global</span>.<span class="hljs-type">POLICY_CONTROL</span>), false, this,</span><br><span class="hljs-class">                  <span class="hljs-type">UserHandle</span>.<span class="hljs-type">USER_ALL</span>);</span><br><span class="hljs-class">          updateSettings();</span><br><span class="hljs-class">      &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">      @<span class="hljs-type">Override</span> public void onChange(<span class="hljs-title">boolean</span> <span class="hljs-title">selfChange</span>) &#123;</span><br><span class="hljs-class">          updateSettings();</span><br><span class="hljs-class">          updateRotation(<span class="hljs-title">false</span>);</span><br><span class="hljs-class">      &#125;</span><br><span class="hljs-class">  &#125;</span><br></code></pre></td></tr></table></figure><p>B:<strong>监听传感器（设备方向）的变化</strong></p><p>PhoneWindownManager 是通过其中的 updateSettings(）函数来更新用户的设定来判断是否需要启动方向监听（即设置中的屏幕锁定按钮），如果允许屏幕旋转则去注册传感器的监听。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> updateSettings() &#123;<br>        ContentResolver resolver = mContext.getContentResolver();<br>        <span class="hljs-type">boolean</span> updateRotation = <span class="hljs-keyword">false</span>;<br>        synchronized (mLock) &#123;<br>。。。。。。。。。<br><br><br>            // Configure rotation <span class="hljs-keyword">lock</span>.<br>            <span class="hljs-type">int</span> userRotation = Settings.<span class="hljs-keyword">System</span>.getIntForUser(resolver,<br>                    Settings.<span class="hljs-keyword">System</span>.USER_ROTATION, Surface.ROTATION_0,<br>                    UserHandle.USER_CURRENT);<br>            <span class="hljs-keyword">if</span> (mUserRotation != userRotation) &#123;<br>                mUserRotation = userRotation;<br>                updateRotation = <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> userRotationMode = Settings.<span class="hljs-keyword">System</span>.getIntForUser(resolver,<br>                    Settings.<span class="hljs-keyword">System</span>.ACCELEROMETER_ROTATION, <span class="hljs-number">0</span>, UserHandle.USER_CURRENT) != <span class="hljs-number">0</span> ?<br>                            WindowManagerPolicy.USER_ROTATION_FREE :<br>                                    WindowManagerPolicy.USER_ROTATION_LOCKED;<br>            <span class="hljs-keyword">if</span> (mUserRotationMode != userRotationMode) &#123;<br>                mUserRotationMode = userRotationMode;<br>                updateRotation = <span class="hljs-keyword">true</span>;<br>                updateOrientationListenerLp();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (mSystemReady) &#123;<br>                <span class="hljs-type">int</span> pointerLocation = Settings.<span class="hljs-keyword">System</span>.getIntForUser(resolver,<br>                        Settings.<span class="hljs-keyword">System</span>.POINTER_LOCATION, <span class="hljs-number">0</span>, UserHandle.USER_CURRENT);<br>                <span class="hljs-keyword">if</span> (mPointerLocationMode != pointerLocation) &#123;<br>                    mPointerLocationMode = pointerLocation;<br>                    mHandler.sendEmptyMessage(pointerLocation != <span class="hljs-number">0</span> ?<br>                            MSG_ENABLE_POINTER_LOCATION : MSG_DISABLE_POINTER_LOCATION);<br>                &#125;<br>            &#125;<br>            // use screen <span class="hljs-keyword">off</span> timeout setting <span class="hljs-keyword">as</span> the timeout <span class="hljs-keyword">for</span> the lockscreen<br>            mLockScreenTimeout = Settings.<span class="hljs-keyword">System</span>.getIntForUser(resolver,<br>                    Settings.<span class="hljs-keyword">System</span>.SCREEN_OFF_TIMEOUT, <span class="hljs-number">0</span>, UserHandle.USER_CURRENT);<br>            String imId = Settings.Secure.getStringForUser(resolver,<br>                    Settings.Secure.DEFAULT_INPUT_METHOD, UserHandle.USER_CURRENT);<br>            <span class="hljs-type">boolean</span> hasSoftInput = imId != <span class="hljs-keyword">null</span> &amp;&amp; imId.length() &gt; <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (mHasSoftInput != hasSoftInput) &#123;<br>                mHasSoftInput = hasSoftInput;<br>                updateRotation = <span class="hljs-keyword">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mImmersiveModeConfirmation != <span class="hljs-keyword">null</span>) &#123;<br>                mImmersiveModeConfirmation.loadSetting(mCurrentUserId);<br>            &#125;<br>        &#125;<br>        synchronized (mWindowManagerFuncs.getWindowManagerLock()) &#123;<br>            PolicyControl.reloadFromSetting(mContext);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (updateRotation) &#123;<br>            updateRotation(<span class="hljs-keyword">true</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>C: updateOrientationListenerLp（）函数多种场景下都会被调用：（注释很清楚无需解释）</strong></p><p>（1） screen turning off, should always disable listeners if already enabled</p><p>（2） screen turned on and current app has sensor based orientation, enable listeners if not already enabled</p><p>（3） screen turned on and current app does not have sensor orientation, disable listeners if already enabled</p><p>（4） screen turning on and current app has sensor based orientation, enable listeners if needed</p><p>（5） screen turning on and current app has nosensor based orientation, do nothing</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void update<span class="hljs-constructor">OrientationListenerLp()</span> &#123;<br>       <span class="hljs-keyword">if</span> (!mOrientationListener.can<span class="hljs-constructor">DetectOrientation()</span>) &#123;<br>           <span class="hljs-comment">// If sensor is turned off or nonexistent for some reason</span><br>           return;<br>       &#125;<br>       <span class="hljs-comment">// Could have been invoked due to screen turning on or off or</span><br>       <span class="hljs-comment">// change of the currently visible window&#x27;s orientation.</span><br>       <span class="hljs-keyword">if</span> (localLOGV) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Slog</span>.</span></span>v(TAG, <span class="hljs-string">&quot;mScreenOnEarly=&quot;</span> + mScreenOnEarly<br>               + <span class="hljs-string">&quot;, mAwake=&quot;</span> + mAwake + <span class="hljs-string">&quot;, mCurrentAppOrientation=&quot;</span> + mCurrentAppOrientation<br>               + <span class="hljs-string">&quot;, mOrientationSensorEnabled=&quot;</span> + mOrientationSensorEnabled<br>               + <span class="hljs-string">&quot;, mKeyguardDrawComplete=&quot;</span> + mKeyguardDrawComplete<br>               + <span class="hljs-string">&quot;, mWindowManagerDrawComplete=&quot;</span> + mWindowManagerDrawComplete);<br>       boolean disable = <span class="hljs-literal">true</span>;<br>       <span class="hljs-comment">// Note: We postpone the rotating of the screen until the keyguard as well as the</span><br>       <span class="hljs-comment">// window manager have reported a draw complete.</span><br>       <span class="hljs-keyword">if</span> (mScreenOnEarly<span class="hljs-operator"> &amp;&amp; </span>mAwake<span class="hljs-operator"> &amp;&amp;</span><br><span class="hljs-operator">               </span>mKeyguardDrawComplete<span class="hljs-operator"> &amp;&amp; </span>mWindowManagerDrawComplete) &#123;<br>           <span class="hljs-keyword">if</span> (need<span class="hljs-constructor">SensorRunningLp()</span>) &#123;<br>               disable = <span class="hljs-literal">false</span>;<br>               <span class="hljs-comment">//enable listener if not already enabled</span><br>               <span class="hljs-keyword">if</span> (!mOrientationSensorEnabled) &#123;<br>                   mOrientationListener.enable<span class="hljs-literal">()</span>;<br>                   <span class="hljs-keyword">if</span>(localLOGV) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Slog</span>.</span></span>v(TAG, <span class="hljs-string">&quot;Enabling listeners&quot;</span>);<br>                   mOrientationSensorEnabled = <span class="hljs-literal">true</span>;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">//check if sensors need to be disabled</span><br>       <span class="hljs-keyword">if</span> (disable<span class="hljs-operator"> &amp;&amp; </span>mOrientationSensorEnabled) &#123;<br>           mOrientationListener.disable<span class="hljs-literal">()</span>;<br>           <span class="hljs-keyword">if</span>(localLOGV) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Slog</span>.</span></span>v(TAG, <span class="hljs-string">&quot;Disabling listeners&quot;</span>);<br>           mOrientationSensorEnabled = <span class="hljs-literal">false</span>;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="D-WindowOrientationListener-的-enable（）和-disable（）"><a href="#D-WindowOrientationListener-的-enable（）和-disable（）" class="headerlink" title="D: WindowOrientationListener 的 enable（）和 disable（）"></a>D: WindowOrientationListener 的 enable（）和 disable（）</h2><p>启动和取消传感器事件的监听，是通过调 SensorManager.registerListener（）和 SensorManager.unregisterListener（）函数来完成的，与 APP 的传感器事件的监听和取消监听用法没有区别。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Enables the WindowOrientationListener so it will monitor the sensor and call</span><br><span class="hljs-comment">    * &#123;@link #onProposedRotationChanged(int)&#125; when the device orientation changes.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-literal">void</span> enable() &#123;<br>       synchronized (mLock) &#123;<br>           <span class="hljs-keyword">if</span> (mSensor == <span class="hljs-built_in">null</span>) &#123;<br>               Slog.w(<span class="hljs-built_in">TAG</span>, <span class="hljs-string">&quot;Cannot detect sensors. Not enabled&quot;</span>);<br>               <span class="hljs-keyword">return</span>;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (mEnabled == <span class="hljs-literal">false</span>) &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-keyword">LOG</span>) &#123;<br>                   Slog.d(<span class="hljs-built_in">TAG</span>, <span class="hljs-string">&quot;WindowOrientationListener enabled&quot;</span>);<br>               &#125;<br>               mOrientationJudge.resetLocked();<br>               <span class="hljs-keyword">if</span> (mSensor.getType() == Sensor.TYPE_ACCELEROMETER) &#123;<br>                   mSensorManager.registerListener(<br>                           mOrientationJudge, mSensor, mRate, DEFAULT_BATCH_LATENCY, mHandler);<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   mSensorManager.registerListener(mOrientationJudge, mSensor, mRate, mHandler);<br>               &#125;<br>               mEnabled = <span class="hljs-literal">true</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Disables the WindowOrientationListener.</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-literal">void</span> disable() &#123;<br>       synchronized (mLock) &#123;<br>           <span class="hljs-keyword">if</span> (mSensor == <span class="hljs-built_in">null</span>) &#123;<br>               Slog.w(<span class="hljs-built_in">TAG</span>, <span class="hljs-string">&quot;Cannot detect sensors. Invalid disable&quot;</span>);<br>               <span class="hljs-keyword">return</span>;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (mEnabled == <span class="hljs-literal">true</span>) &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-keyword">LOG</span>) &#123;<br>                   Slog.d(<span class="hljs-built_in">TAG</span>, <span class="hljs-string">&quot;WindowOrientationListener disabled&quot;</span>);<br>               &#125;<br>               mSensorManager.unregisterListener(mOrientationJudge);<br>               mEnabled = <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="2）sensor-事件回调"><a href="#2）sensor-事件回调" class="headerlink" title="2）sensor 事件回调"></a>2）sensor 事件回调</h2><p>传感器事件是通过<strong>WindowOrientationListener</strong> 的 onProposedRotationChanged（）接口回调到 PhoneWindownManager 中的，然后通过 updateRotation（）调用 windowManagerService 的 updateRotation（）做屏幕旋转。</p><p>首先调用 PowerManagerInternal.powerHint（）来提升 cpu 的频率来提高屏幕旋转时候的性能，然后调用 WindowManager.updateRotation（）做屏幕旋转，屏幕旋转的实际操作是由 WindowManagerService 实际来完成的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyOrientationListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WindowOrientationListener</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> final Runnable mUpdateRotationRunnable = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Runnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-comment">// send interaction hint to improve redraw performance</span><br>            mPowerManagerInternal.powerHint(PowerManagerInternal.POWER_HINT_INTERACTION, <span class="hljs-number">0</span>);<br>            updateRotation(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-title">MyOrientationListener</span>(<span class="hljs-params">Context context, Handler handler</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, handler);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onProposedRotationChanged</span>(<span class="hljs-params">int rotation</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (localLOGV) Slog.v(TAG, <span class="hljs-string">&quot;onProposedRotationChanged, rotation=&quot;</span> + rotation);<br>        mHandler.post(mUpdateRotationRunnable);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void update<span class="hljs-constructor">Rotation(<span class="hljs-params">boolean</span> <span class="hljs-params">alwaysSendConfiguration</span>)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//set orientation on WindowManager</span><br>        mWindowManager.update<span class="hljs-constructor">Rotation(<span class="hljs-params">alwaysSendConfiguration</span>, <span class="hljs-params">false</span>)</span>;<br>    &#125; catch (RemoteException e) &#123;<br>        <span class="hljs-comment">// Ignore</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3）WindowManagerService-做屏幕旋转"><a href="#3）WindowManagerService-做屏幕旋转" class="headerlink" title="3）WindowManagerService 做屏幕旋转"></a>3）WindowManagerService 做屏幕旋转</h2><p>WindowManagerService 大致完成三件事，首先更新屏幕方向，然后具体实施屏幕旋转，最后通知 AMS configuration 变更。</p><p>具体实施屏幕旋转的函数是 updateRotationUncheckedLocked（）这部分详细旋转过程单独详细分析。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Override<br>public void update<span class="hljs-constructor">Rotation(<span class="hljs-params">boolean</span> <span class="hljs-params">alwaysSendConfiguration</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">forceRelayout</span>)</span> &#123;<br>    update<span class="hljs-constructor">RotationUnchecked(<span class="hljs-params">alwaysSendConfiguration</span>, <span class="hljs-params">forceRelayout</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void update<span class="hljs-constructor">RotationUnchecked(<span class="hljs-params">boolean</span> <span class="hljs-params">alwaysSendConfiguration</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">forceRelayout</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span>(DEBUG_ORIENTATION) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Slog</span>.</span></span>v(TAG_WM, <span class="hljs-string">&quot;updateRotationUnchecked(&quot;</span><br>               + <span class="hljs-string">&quot;alwaysSendConfiguration=&quot;</span> + alwaysSendConfiguration + <span class="hljs-string">&quot;)&quot;</span>);<br><br>    long origId = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Binder</span>.</span></span>clear<span class="hljs-constructor">CallingIdentity()</span>;<br>    boolean changed;<br>    synchronized(mWindowMap) &#123;<br>        changed = update<span class="hljs-constructor">RotationUncheckedLocked(<span class="hljs-params">false</span>)</span>;<br>        <span class="hljs-keyword">if</span> (!changed<span class="hljs-operator"> || </span>forceRelayout) &#123;<br>            get<span class="hljs-constructor">DefaultDisplayContentLocked()</span>.layoutNeeded = <span class="hljs-literal">true</span>;<br>            mWindowPlacerLocked.perform<span class="hljs-constructor">SurfacePlacement()</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (changed<span class="hljs-operator"> || </span>alwaysSendConfiguration) &#123;<br>        send<span class="hljs-constructor">NewConfiguration()</span>;<br>    &#125;<br><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Binder</span>.</span></span>restore<span class="hljs-constructor">CallingIdentity(<span class="hljs-params">origId</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> updateRotationUncheckedLocked(<span class="hljs-built_in">boolean</span> inTransaction) &#123;<br>      <span class="hljs-keyword">if</span> (mDeferredRotationPauseCount &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-comment">// Rotation updates have been paused temporarily.  Defer the update until</span><br>          <span class="hljs-comment">// updates have been resumed.</span><br>          <span class="hljs-keyword">if</span> (DEBUG_ORIENTATION) Slog.v(TAG_WM, <span class="hljs-string">&quot;Deferring rotation, rotation is paused.&quot;</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<br><br>      ScreenRotationAnimation screenRotationAnimation =<br>              mAnimator.getScreenRotationAnimationLocked(Display.DEFAULT_DISPLAY);<br>      <span class="hljs-keyword">if</span> (screenRotationAnimation != <span class="hljs-keyword">null</span> &amp;&amp; screenRotationAnimation.isAnimating()) &#123;<br>          <span class="hljs-comment">// Rotation updates cannot be performed while the previous rotation change</span><br>          <span class="hljs-comment">// animation is still in progress.  Skip this update.  We will try updating</span><br>          <span class="hljs-comment">// again after the animation is finished and the display is unfrozen.</span><br>          <span class="hljs-keyword">if</span> (DEBUG_ORIENTATION) Slog.v(TAG_WM, <span class="hljs-string">&quot;Deferring rotation, animation in progress.&quot;</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (mDisplayFrozen) &#123;<br>          <span class="hljs-comment">// Even if the screen rotation animation has finished (e.g. isAnimating</span><br>          <span class="hljs-comment">// returns false), there is still some time where we haven&#x27;t yet unfrozen</span><br>          <span class="hljs-comment">// the display. We also need to abort rotation here.</span><br>          <span class="hljs-keyword">if</span> (DEBUG_ORIENTATION) Slog.v(TAG_WM, <span class="hljs-string">&quot;Deferring rotation, still finishing previous rotation&quot;</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (!mDisplayEnabled) &#123;<br>          <span class="hljs-comment">// No point choosing a rotation if the display is not enabled.</span><br>          <span class="hljs-keyword">if</span> (DEBUG_ORIENTATION) Slog.v(TAG_WM, <span class="hljs-string">&quot;Deferring rotation, display is not enabled.&quot;</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">final</span> DisplayContent displayContent = getDefaultDisplayContentLocked();<br>      <span class="hljs-keyword">final</span> WindowList windows = displayContent.getWindowList();<br><br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> oldRotation = mRotation;<br>      <span class="hljs-built_in">int</span> rotation = mPolicy.rotationForOrientationLw(mLastOrientation, mRotation);<br>      <span class="hljs-built_in">boolean</span> rotateSeamlessly = mPolicy.shouldRotateSeamlessly(oldRotation, rotation);<br><br>      <span class="hljs-keyword">if</span> (rotateSeamlessly) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = windows.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>              WindowState w = windows.<span class="hljs-built_in">get</span>(i);<br>              <span class="hljs-comment">// We can&#x27;t rotate (seamlessly or not) while waiting for the last seamless rotation</span><br>              <span class="hljs-comment">// to complete (that is, waiting for windows to redraw). It&#x27;s tempting to check</span><br>              <span class="hljs-comment">// w.mSeamlessRotationCount but that could be incorrect in the case of window-removal.</span><br>              <span class="hljs-keyword">if</span> (w.mSeamlesslyRotated) &#123;<br>                  <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>              &#125;<br>              <span class="hljs-comment">// In what can only be called an unfortunate workaround we require</span><br>              <span class="hljs-comment">// seamlessly rotated child windows to have the TRANSFORM_TO_DISPLAY_INVERSE</span><br>              <span class="hljs-comment">// flag. Due to limitations in the client API, there is no way for</span><br>              <span class="hljs-comment">// the client to set this flag in a race free fashion. If we seamlessly rotate</span><br>              <span class="hljs-comment">// a window which does not have this flag, but then gains it, we will get</span><br>              <span class="hljs-comment">// an incorrect visual result (rotated viewfinder). This means if we want to</span><br>              <span class="hljs-comment">// support seamlessly rotating windows which could gain this flag, we can&#x27;t</span><br>              <span class="hljs-comment">// rotate windows without it. This limits seamless rotation in N to camera framework</span><br>              <span class="hljs-comment">// users, windows without children, and native code. This is unfortunate but</span><br>              <span class="hljs-comment">// having the camera work is our primary goal.</span><br>              <span class="hljs-keyword">if</span> (w.isChildWindow() &amp; w.isVisibleNow() &amp;&amp;<br>                      !w.mWinAnimator.mSurfaceController.getTransformToDisplayInverse()) &#123;<br>                  rotateSeamlessly = <span class="hljs-keyword">false</span>;<br>              &#125;<br>          &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement forced rotation changes.</span><br>      <span class="hljs-comment">//       Set mAltOrientation to indicate that the application is receiving</span><br>      <span class="hljs-comment">//       an orientation that has different metrics than it expected.</span><br>      <span class="hljs-comment">//       eg. Portrait instead of Landscape.</span><br><br>      <span class="hljs-built_in">boolean</span> altOrientation = !mPolicy.rotationHasCompatibleMetricsLw(<br>              mLastOrientation, rotation);<br><br>      <span class="hljs-keyword">if</span> (DEBUG_ORIENTATION) &#123;<br>          Slog.v(TAG_WM, <span class="hljs-string">&quot;Selected orientation &quot;</span><br>                  + mLastOrientation + <span class="hljs-string">&quot;, got rotation &quot;</span> + rotation<br>                  + <span class="hljs-string">&quot; which has &quot;</span> + (altOrientation ? <span class="hljs-string">&quot;incompatible&quot;</span> : <span class="hljs-string">&quot;compatible&quot;</span>)<br>                  + <span class="hljs-string">&quot; metrics&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (mRotation == rotation &amp;&amp; mAltOrientation == altOrientation) &#123;<br>          <span class="hljs-comment">// No change.</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (DEBUG_ORIENTATION) &#123;<br>          Slog.v(TAG_WM,<br>              <span class="hljs-string">&quot;Rotation changed to &quot;</span> + rotation + (altOrientation ? <span class="hljs-string">&quot; (alt)&quot;</span> : <span class="hljs-string">&quot;&quot;</span>)<br>              + <span class="hljs-string">&quot; from &quot;</span> + mRotation + (mAltOrientation ? <span class="hljs-string">&quot; (alt)&quot;</span> : <span class="hljs-string">&quot;&quot;</span>)<br>              + <span class="hljs-string">&quot;, lastOrientation=&quot;</span> + mLastOrientation);<br>      &#125;<br><br>      mRotation = rotation;<br>      mAltOrientation = altOrientation;<br>      mPolicy.setRotationLw(mRotation);<br><br>      mWindowsFreezingScreen = WINDOWS_FREEZING_SCREENS_ACTIVE;<br>      mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);<br>      mH.sendEmptyMessageDelayed(H.WINDOW_FREEZE_TIMEOUT, WINDOW_FREEZE_TIMEOUT_DURATION);<br>      mWaitingForConfig = <span class="hljs-keyword">true</span>;<br>      displayContent.layoutNeeded = <span class="hljs-keyword">true</span>;<br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span>[] anim = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">2</span>];<br>      <span class="hljs-keyword">if</span> (displayContent.isDimming()) &#123;<br>          anim[<span class="hljs-number">0</span>] = anim[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          mPolicy.selectRotationAnimationLw(anim);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (!rotateSeamlessly) &#123;<br>          startFreezingDisplayLocked(inTransaction, anim[<span class="hljs-number">0</span>], anim[<span class="hljs-number">1</span>]);<br>          <span class="hljs-comment">// startFreezingDisplayLocked can reset the ScreenRotationAnimation.</span><br>          screenRotationAnimation =<br>              mAnimator.getScreenRotationAnimationLocked(Display.DEFAULT_DISPLAY);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// The screen rotation animation uses a screenshot to freeze the screen</span><br>          <span class="hljs-comment">// while windows resize underneath.</span><br>          <span class="hljs-comment">// When we are rotating seamlessly, we allow the elements to transition</span><br>          <span class="hljs-comment">// to their rotated state independently and without a freeze required.</span><br>          screenRotationAnimation = <span class="hljs-keyword">null</span>;<br><br>          <span class="hljs-comment">// We have to reset this in case a window was removed before it</span><br>          <span class="hljs-comment">// finished seamless rotation.</span><br>          mSeamlessRotationCount = <span class="hljs-number">0</span>;<br>      &#125;<br><br>      <span class="hljs-comment">// We need to update our screen size information to match the new rotation. If the rotation</span><br>      <span class="hljs-comment">// has actually changed then this method will return true and, according to the comment at</span><br>      <span class="hljs-comment">// the top of the method, the caller is obligated to call computeNewConfigurationLocked().</span><br>      <span class="hljs-comment">// By updating the Display info here it will be available to</span><br>      <span class="hljs-comment">// computeScreenConfigurationLocked later.</span><br>      updateDisplayAndOrientationLocked(mCurConfiguration.uiMode);<br><br>      <span class="hljs-keyword">final</span> DisplayInfo displayInfo = displayContent.getDisplayInfo();<br>      <span class="hljs-keyword">if</span> (!inTransaction) &#123;<br>          <span class="hljs-keyword">if</span> (SHOW_TRANSACTIONS) &#123;<br>              Slog.i(TAG_WM, <span class="hljs-string">&quot;&gt;&gt;&gt; OPEN TRANSACTION setRotationUnchecked&quot;</span>);<br>          &#125;<br>          SurfaceControl.openTransaction();<br>      &#125;<br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// <span class="hljs-doctag">NOTE:</span> We disable the rotation in the emulator because</span><br>          <span class="hljs-comment">//       it doesn&#x27;t support hardware OpenGL emulation yet.</span><br>          <span class="hljs-keyword">if</span> (CUSTOM_SCREEN_ROTATION &amp;&amp; screenRotationAnimation != <span class="hljs-keyword">null</span><br>                  &amp;&amp; screenRotationAnimation.hasScreenshot()) &#123;<br>              <span class="hljs-keyword">if</span> (screenRotationAnimation.setRotationInTransaction(<br>                      rotation, mFxSession,<br>                      MAX_ANIMATION_DURATION, getTransitionAnimationScaleLocked(),<br>                      displayInfo.logicalWidth, displayInfo.logicalHeight)) &#123;<br>                  scheduleAnimationLocked();<br>              &#125;<br>          &#125;<br><br>          <span class="hljs-keyword">if</span> (rotateSeamlessly) &#123;<br>              <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = windows.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                  WindowState w = windows.<span class="hljs-built_in">get</span>(i);<br>                  w.mWinAnimator.seamlesslyRotateWindow(oldRotation, mRotation);<br>              &#125;<br>          &#125;<br><br>          mDisplayManagerInternal.performTraversalInTransactionFromWindowManager();<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-keyword">if</span> (!inTransaction) &#123;<br>              SurfaceControl.closeTransaction();<br>              <span class="hljs-keyword">if</span> (SHOW_LIGHT_TRANSACTIONS) &#123;<br>                  Slog.i(TAG_WM, <span class="hljs-string">&quot;&lt;&lt;&lt; CLOSE TRANSACTION setRotationUnchecked&quot;</span>);<br>              &#125;<br>          &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = windows.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>          WindowState w = windows.<span class="hljs-built_in">get</span>(i);<br>          <span class="hljs-comment">// Discard surface after orientation change, these can&#x27;t be reused.</span><br>          <span class="hljs-keyword">if</span> (w.mAppToken != <span class="hljs-keyword">null</span>) &#123;<br>              w.mAppToken.destroySavedSurfaces();<br>          &#125;<br>          <span class="hljs-keyword">if</span> (w.mHasSurface &amp;&amp; !rotateSeamlessly) &#123;<br>              <span class="hljs-keyword">if</span> (DEBUG_ORIENTATION) Slog.v(TAG_WM, <span class="hljs-string">&quot;Set mOrientationChanging of &quot;</span> + w);<br>              w.mOrientationChanging = <span class="hljs-keyword">true</span>;<br>              mWindowPlacerLocked.mOrientationChangeComplete = <span class="hljs-keyword">false</span>;<br>              w.mLastFreezeDuration = <span class="hljs-number">0</span>;<br>          &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (rotateSeamlessly) &#123;<br>          mH.removeMessages(H.SEAMLESS_ROTATION_TIMEOUT);<br>          mH.sendEmptyMessageDelayed(H.SEAMLESS_ROTATION_TIMEOUT, SEAMLESS_ROTATION_TIMEOUT_DURATION);<br>      &#125;<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=mRotationWatchers.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>              mRotationWatchers.<span class="hljs-built_in">get</span>(i).watcher.onRotationChanged(rotation);<br>          &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>          &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// TODO (multidisplay): Magnification is supported only for the default display.</span><br>      <span class="hljs-comment">// Announce rotation only if we will not animate as we already have the</span><br>      <span class="hljs-comment">// windows in final state. Otherwise, we make this call at the rotation end.</span><br>      <span class="hljs-keyword">if</span> (screenRotationAnimation == <span class="hljs-keyword">null</span> &amp;&amp; mAccessibilityController != <span class="hljs-keyword">null</span><br>              &amp;&amp; displayContent.getDisplayId() == Display.DEFAULT_DISPLAY) &#123;<br>          mAccessibilityController.onRotationChangedLocked(getDefaultDisplayContentLocked(),<br>                  rotation);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>屏幕旋转</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
